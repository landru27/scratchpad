//////////////////////////////////////////////////////////////////////////////
package main

// in rqst_queue_processor.go
func main() {
	dataAccessor := dataaccesslayer.NewDataAccessorOracle(theINSPIdsn)
	inboundQueue := &QueueForEqDropOff{...}
	qi := fetchItemFromQueue(dataAccessor, inboundQueue)
	digestedrequest := processFetchedQueueItem(inboundQueue, qi)
}

func fetchItemFromQueue(dataaccessor DataAccessorInterface, rqstqueue QueueInterface) (RqstQueueItem) {
	qid := dataaccessor.LookForItemz(rqstqueue)
	err := dataaccessor.LockThatItemBoi(rqstqueue, qid)
	itm := dataaccessor.FetchMeAnItem(rqstqueue, qid)

	rqstitm := QueueItemInterface.(RqstQueueItem)
	return rqstitm

	// ...  -OR-  would we do:
	// qid := rqstqueue.LookForItemz(dataaccessor)
	// etc.
}

func processFetchedQueueItem(somequeue QueueInterface, rqstitm RqstQueueItem) (PBufRqstQueueItem) {
	protobufofrqstitm := somequeue.ParseQueueItem(rqstitm)

	// all orders from ParanoidBank must be rot13'd before we can proceed
	if protobufofrqstitm.Client.Name == 'ParanoidBank' {
		protobufofrqstitm = Rot13ThatSucker(protobufofrqstitm)
	}

	return protobufofrqstitm
}


// in rqst_queue_processor_test.go
func test_one() {
	dataAccessor := dataaccesslayer.NewDataAccessorLocalFiles("/yellow/brick/road")
	inboundQueue := &QueueForEqDropOff{...}
	qi := fetchItemFromQueue(dataAccessor, inboundQueue)
	digestedrequest := processFetchedQueueItem(inboundQueue, qi)
}


//////////////////////////////////////////////////////////////////////////////
package dataaccesslayer

// why *shouldn't* I group these methods together?  it's hard to imagine a queue data accessor that does not need to do all of these,
// and if they are separate interfaces, we'd need to pass a bunch of interfaces to functions that handle queue items ...
type DataAccessorInterface interface {
	LookForItemz(QueueInterface) (string)
	LockThatItemBoi(QueueInterface, string) (error)
	FetchMeAnItem(QueueInterface, string) (QueueItemInterface)
}


// same package and file?  or different file?  different package?  different both?
type DataAccessorOracle struct {
	DBDSN        string
	DBConnection *sqlx.DBH
}

func NewDataAccessorOracle(dsn string) *DataAccessorOracle {
	// open database connection based on the dsn
	return &DataAccessorOracle{
		DBDSN:        dsn
		DBConnection: ...the opened connection...
	}
}

func (daora *DataAccessorOracle) LookForItemz(somequeue QueueInterface) string {
	details = somequeue.DescribeYourselfForMe()
	// ...
}

func (daora *DataAccessorOracle) LockThatItemBoi(somequeue QueueInterface, qid string) error {
	details = somequeue.DescribeYourselfForMe()
	// ...
}

func (daora *DataAccessorOracle) FetchDataz(somequeue QueueInterface, qid string) QueueItemInterface {
	details = somequeue.DescribeYourselfForMe()

	// ensure non-nil database connection
	// compose SQL query for reading queue item based on 'details'
	// execute the query

	// would it be feasible to scan the DB query result into a struct identified in the 'details' from somequeue.DescribeYourselfForMe() ?
	//     - e.g., one of the fields on 'details' could be an empty struct, that we inspect for *its* fields, then set those fields from columns of the same name ...
	//     - is this what sqlx.Scan does ?
	//
	// or should these dataaccesslayer thingies return generic data objects like arrays, and let the caller decide if/how to organize the array into something more, um, "struct"ured
}


// same package and file?  or different file?  different package?  different both?
type DataAccessorLocalFiles struct {
	FilePath string
}

func NewDataAccessorLocalFiles(path string) *DataAccessorLocalFiles {
	// maybe do some validation on the supplied FilePath
	return &DataAccessorLocalFiles{
		FilePath: path
	}
}

func (daora *DataAccessorLocalFiles) LookForItemz(somequeue QueueInterface) string {
	details = somequeue.DescribeYourselfForMe()
	// ...
}

func (daora *DataAccessorLocalFiles) LockThatItemBoi(somequeue QueueInterface, qid string) error {
	details = somequeue.DescribeYourselfForMe()
	// ...
}

func (daora *DataAccessorLocalFiles) FetchDataz(somequeue QueueInterface, qid string) QueueItemInterface {
	details = somequeue.DescribeYourselfForMe()

	// ensure non-nil file path
	// compose fully-qualified filename to read based on 'details'
	// execute the query

	// would it be feasible to scan the file read result into a struct identified in the 'details' from somequeue.DescribeYourselfForMe() ?
	//     - e.g., one of the fields on 'details' could be an empty struct, that we inspect for *its* fields, then set those fields from record keys of the same name ...
}




//////////////////////////////////////////////////////////////////////////////
package qrunner

type QueueItemInterface interface{}

// aren't I going to end up grouping methods into here, like with DataAccessorInterface?
type QueueInterface interface {
	ParseQueueItem(QueueItemInterface) proto.Message  // correct?
}


//////////////////////////////////////////////////////////////////////////////
package rqst_qrunner

type RqstItem struct {
	RqstID          string
	XMLOfRequest    string
	XMLOfReqestAck  string
	EQTransactionID string
	QueueStatus     string
}

type Rqst struct {
}

func NewRqst(dah *DataAccessor) *Rqst {
        return &Rqst {}
}

func (r *Rqst) ParseQueueItem(itm *QueueItemInterface) proto.Message {
	
	// tear itm apart and 
}



//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
////////////////    old stuff from 01 below    ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


//
// since the package name and structure will already namespace, say, rqst_qrunner
// apart from task_qrunner, why have the 'qrunner' interfaces, above?  why not
// just have functions like LookForItem() and FetchItem() in the separate packages
// 'rqst_qrunner' and 'task_qrunner'?  even a processor that needs to manage two
// kinds of queues will distinguish them with e.g. rq = rqst_qrunner.NewRqstQRunner{}
// and tq = task_qrunner.NewTaskQRunner{} ...
//
// having the 'Looker' and 'Fetcher' interface let me pass them as arguments to things
// that don't know the difference between 'rqst_qrunner' and 'task_qrunner', ...  but
// what sorts of things would I pass 'Looker' and 'Fetcher' *to* ?
//
//////////////////////////////////////////////////////////////////////////////
package rqst_qrunner

func (r *Rqst) FetchItem(iid string) (ri QueueItem, re error) {
	ri := r.DataAccessHandle.FetchDataz(iid)
	return ri, nil
}

//
//  the below DataAccessor feels like there will be the same code for each kind of queue runner,
//  differing only by the structure of the queue item it deals with, ...
//
//  it's tempting to try and genericize DataAccessor by putting it in 'qrunner' and having
//  FetchDataz return a QueueItem;  then, rqst_qrunner would have FetchRqstDataz (I guess) ...
//  but this leads back to where I am currently, where I made a GenericQueueRunner with all the
//  generic queue management functionality, and RqstQueueRunner is a struct with a
//  GenericQueueRunner field (thus, nested structs ...)     How do I know *where* to stop genericizing?!?
//
////////////////
type DataAccessor interface {
	LookForItemz() string
	FetchDataz(rid string) RqstItem
}

